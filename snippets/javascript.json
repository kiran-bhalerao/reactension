{
  "Arrow Function": {
    "prefix": "arr",
    "body": "()=>{}",
    "description": "Use Arrow Function !"
  },
  "Mongoose Scheme": {
    "prefix": "mongooseScheme",
    "body": [
      "const mongoose = require('mongoose');",
      "const { Schema } = mongoose;",
      "",
      "const $1 = new Schema({",
      "$3",
      "});",
      "",
      "const $2 = mongoose.model('student',$1);",
      "",
      "module.exports = $2;"
    ],
    "description": "Use Mongoose Scheme !"
  },
  "Body parser middleware": {
    "prefix": "middleware-body-parser",
    "body": [
      "// BODY-PARSER MIDDLEWARE",
      "const bodyParser = require('body-parser');",
      "app.use(bodyParser.json());",
      "app.use(bodyParser.urlencoded({",
      "   extended: true",
      "}));"
    ],
    "description": "Body parser middleware !"
  },
  "Handlebars middleware": {
    "prefix": "middleware-handlebars",
    "body": [
      "// HANDLEBARS MIDDLEWARE",
      "const exphbs = require('express-handlebars');",
      "app.engine('handlebars', exphbs({ defaultLayout: 'main' }));",
      "app.set('view engine', 'handlebars');"
    ],
    "description": "Handlebars middleware !"
  },
  "Method-override middleware": {
    "prefix": "middleware-method-override",
    "body": [
      "// METHOD-OVERRIDE MIDDLEWARE",
      "const methodOverride = require('method-override');",
      "app.use(methodOverride('_method'))"
    ],
    "description": "Method-override middleware !"
  },
  "Connect-flash middleware": {
    "prefix": "middleware-connect-flash",
    "body": [
      "// CONNECT FLASH MIDDLEWARE",
      "const flash = require('connect-flash');",
      "app.use(flash());"
    ],
    "description": "Connect-flash middleware !"
  },
  "express Static middleware": {
    "prefix": "middleware-express-static",
    "body": ["app.use(express.static(path.join(__dirname, 'public')));"],
    "description": "express Static middleware !"
  },
  "passport middleware": {
    "prefix": "middleware-passport-local",
    "body": [
      "// PASSPORT MIDDLEWARE",
      "const passport = require('passport');",
      "const LocalStrategy = require('passport-local').Strategy;",
      "app.use(passport.initialize());",
      "app.use(passport.session());"
    ],
    "description": "passport middleware !"
  },
  "express session middleware": {
    "prefix": "middleware-express-session",
    "body": [
      "// EXPRESS SESSION MIDDLEWARE",
      "const session = require('express-session');",
      "app.use(session({",
      "secret: 'keyboard cat',",
      "resave: true,",
      "saveUninitialized: true,",
      "}))"
    ],
    "description": "express session middleware !"
  },
  "serialize deserialize middleware": {
    "prefix": "middleware-serialize-deserialize",
    "body": [
      "// Passport will serialize and deserialize user instances to and from the session.",
      "passport.serializeUser(function (user, done) {",
      "done(null, user.id);",
      " });",
      "",
      "passport.deserializeUser(function (id, done) {",
      "User.findById(id, function (err, user) {",
      "  done(err, user);",
      "});",
      "});"
    ],
    "description": "serialize deserialize middleware !"
  },
  "CORS middleware": {
    "prefix": "middleware-cors",
    "body": [
      "// CORS MIDDLEWARE",
      "const cors = require('cors')",
      "app.use(cors());"
    ],
    "description": "CORS middleware !"
  },
  "Import Component": {
    "prefix": "imp",
    "body": ["import $1 from './$1'"],
    "description": "Import Component !"
  },
  "Import Component from component": {
    "prefix": "impc",
    "body": ["import $1 from './components/$1'"],
    "description": "Import Component component!"
  }
}
